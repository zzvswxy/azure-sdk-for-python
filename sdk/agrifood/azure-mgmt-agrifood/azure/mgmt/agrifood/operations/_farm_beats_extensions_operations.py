# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Iterable, List, Optional, TypeVar

from msrest import Serializer

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models as _models
from .._vendor import _convert_request, _format_url_section
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False

def build_list_request(
    *,
    farm_beats_extension_ids: Optional[List[str]] = None,
    farm_beats_extension_names: Optional[List[str]] = None,
    extension_categories: Optional[List[str]] = None,
    publisher_ids: Optional[List[str]] = None,
    max_page_size: Optional[int] = 50,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-05-12-preview")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/providers/Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions")

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if farm_beats_extension_ids is not None:
        _query_parameters['farmBeatsExtensionIds'] = [_SERIALIZER.query("farm_beats_extension_ids", q, 'str') if q is not None else '' for q in farm_beats_extension_ids]
    if farm_beats_extension_names is not None:
        _query_parameters['farmBeatsExtensionNames'] = [_SERIALIZER.query("farm_beats_extension_names", q, 'str') if q is not None else '' for q in farm_beats_extension_names]
    if extension_categories is not None:
        _query_parameters['extensionCategories'] = [_SERIALIZER.query("extension_categories", q, 'str') if q is not None else '' for q in extension_categories]
    if publisher_ids is not None:
        _query_parameters['publisherIds'] = [_SERIALIZER.query("publisher_ids", q, 'str') if q is not None else '' for q in publisher_ids]
    if max_page_size is not None:
        _query_parameters['$maxPageSize'] = _SERIALIZER.query("max_page_size", max_page_size, 'int', maximum=1000, minimum=10)
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_get_request(
    farm_beats_extension_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-05-12-preview")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/providers/Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions/{farmBeatsExtensionId}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "farmBeatsExtensionId": _SERIALIZER.url("farm_beats_extension_id", farm_beats_extension_id, 'str', pattern=r'^[a-zA-Z]{3,50}[.][a-zA-Z]{3,100}$'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )

class FarmBeatsExtensionsOperations(object):
    """FarmBeatsExtensionsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.agrifood.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def list(
        self,
        farm_beats_extension_ids: Optional[List[str]] = None,
        farm_beats_extension_names: Optional[List[str]] = None,
        extension_categories: Optional[List[str]] = None,
        publisher_ids: Optional[List[str]] = None,
        max_page_size: Optional[int] = 50,
        **kwargs: Any
    ) -> Iterable["_models.FarmBeatsExtensionListResponse"]:
        """Get list of farmBeats extension.

        :param farm_beats_extension_ids: FarmBeatsExtension ids. Default value is None.
        :type farm_beats_extension_ids: list[str]
        :param farm_beats_extension_names: FarmBeats extension names. Default value is None.
        :type farm_beats_extension_names: list[str]
        :param extension_categories: Extension categories. Default value is None.
        :type extension_categories: list[str]
        :param publisher_ids: Publisher ids. Default value is None.
        :type publisher_ids: list[str]
        :param max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50. Default value is 50.
        :type max_page_size: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either FarmBeatsExtensionListResponse or the result of
         cls(response)
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.mgmt.agrifood.models.FarmBeatsExtensionListResponse]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = kwargs.pop('api_version', "2020-05-12-preview")  # type: str

        cls = kwargs.pop('cls', None)  # type: ClsType["_models.FarmBeatsExtensionListResponse"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_request(
                    api_version=api_version,
                    farm_beats_extension_ids=farm_beats_extension_ids,
                    farm_beats_extension_names=farm_beats_extension_names,
                    extension_categories=extension_categories,
                    publisher_ids=publisher_ids,
                    max_page_size=max_page_size,
                    template_url=self.list.metadata['url'],
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                
                request = build_list_request(
                    api_version=api_version,
                    farm_beats_extension_ids=farm_beats_extension_ids,
                    farm_beats_extension_names=farm_beats_extension_names,
                    extension_categories=extension_categories,
                    publisher_ids=publisher_ids,
                    max_page_size=max_page_size,
                    template_url=next_link,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("FarmBeatsExtensionListResponse", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': "/providers/Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions"}  # type: ignore

    @distributed_trace
    def get(
        self,
        farm_beats_extension_id: str,
        **kwargs: Any
    ) -> "_models.FarmBeatsExtension":
        """Get farmBeats extension.

        :param farm_beats_extension_id: farmBeatsExtensionId to be queried.
        :type farm_beats_extension_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: FarmBeatsExtension, or the result of cls(response)
        :rtype: ~azure.mgmt.agrifood.models.FarmBeatsExtension
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.FarmBeatsExtension"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-05-12-preview")  # type: str

        
        request = build_get_request(
            farm_beats_extension_id=farm_beats_extension_id,
            api_version=api_version,
            template_url=self.get.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('FarmBeatsExtension', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': "/providers/Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions/{farmBeatsExtensionId}"}  # type: ignore

